version: '3.8'
services:
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
#    ports:
#      - "33160:3306"
    volumes:
        - db:/var/lib/mysql
    networks:
      - backend
  app:
    depends_on:
      - mysqldb
    build: ./
    restart: on-failure
    env_file: ./.env
    expose:
      - 80
      - 8080
    ports:
      - "8080:8080"
    environment:
        SPRING_APPLICATION_JSON: '{
	"spring.datasource.url": "jdbc:mysql://mysqldb:3306/$MYSQLDB_DATABASE?useSSL=false",
	"spring.datasource.username": "$MYSQLDB_USER",
	"spring.datasource.password": "$MYSQLDB_ROOT_PASSWORD",
	"spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.MySQL5InnoDBDialect",
	"spring.jpa.hibernate.ddl-auto": "update",
	"spring.mvc.pathmatch.matching-strategy": "ANT_PATH_MATCHER",

	"spring.mail.protocol": "smtp",
	"spring.mail.host": "smtp.gmail.com",
	"spring.mail.port": "587",
	"spring.mail.username": "$SPRING_MAIL_USERNAME",
	"spring.mail.password": "$SPRING_MAIL_PASSWORD",
	"spring.mail.properties.mail.smtp.starttls.enable": "true",

	"spring.mail.properties.mail.smtp.auth": "true",
	"spring.mail.properties.mail.smtp.connectiontimeout": "5000",
	"spring.mail.properties.mail.smtp.timeout": "5000",
	"spring.mail.properties.mail.smtp.writetimeout": "5000"
}'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true
    networks:
      - backend
      - frontend

    # Frontend Service
  app-client:
      build:
        context: polling-app-client
        dockerfile: Dockerfile
        args:
          REACT_APP_API_BASE_URL: http://localhost:8080/api/v1/
      ports:
#        - "3001:3000"
        - "8081:80"
      restart: always
      expose:
        - 3000
        - 80
      depends_on:
        - app
      networks:
        - frontend
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf
#  nginx:
#    image: nginx:1.23.0-alpine
#    container_name: webserver
#    restart: unless-stopped
#    ports:
#      - "8081:80"
#    depends_on:
#      - app
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
volumes:
    db:
networks:
  backend:
  frontend:





